FSDataOutputStream:

        TheDistributedFileSystem returns an FSDataOutputStream for the client to start writing data to. As the client writes data, DFSOutputStream 
splits it into packets, which it writes to an internal queue, called the data queue. The data queue is consumed by the DataStreamer, which 
is responsible for asking the namenode to allocate new blocks by picking a list of suitable datanodes to store the replicas.

DFSOutputStream:
        
        DFSOutputStream also maintains an internal queue of packets that are waiting to be acknowledged by datanodes, called the ack queue. A 
packet is removed from the ack queue only when it has been acknowledged by the datanodes in the pipeline. Datanode sends the acknowledgement 
once required replicas are created (3 by default). Similarly all the blocks are stored and replicated on the different datanodes, the data 
blocks are copied in parallel.

FSDataInputStream:
        
        FSDataInputStream is an input stream that supports file seeks.
        DistributedFileSystem return an FSDataInputStream to the client for it to read data from. FSDataInputStream in turns wraps the DFSInputStream 
which manages the datanode and namenode I/O Client calls read() on the stream. DFSInputStream which has stored the datanode addresses then 
connects to the closest datanode for the first block in the file.

DFSInputStream:
        
        If the DFSInputStream encounters an error while communicating with a datanode, it will try the next closest one for that block. It will 
also remember datanodes that have failed so that it doesnâ€™t needlessly retry them for later blocks. The DFSInputStream also verifies checksums for 
the data transferred to it from the datanode. If a corrupted block is found, it is reported to the namenode before the DFSInputStream attempts 
to read a replica of the block from another datanode.
